#!/bin/bash

# Turso Setup Script
# This script helps you set up Turso credentials and create the .env file

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

echo "ðŸš€ Turso Setup Script"
echo "===================="
echo

# Check if Turso CLI is installed
if ! command -v turso &> /dev/null; then
    print_warn "Turso CLI not found. Installing..."
    
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        if command -v brew &> /dev/null; then
            brew install tursodatabase/tap/turso
        else
            curl -sSfL https://get.tur.so/install.sh | bash
        fi
    else
        # Linux
        curl -sSfL https://get.tur.so/install.sh | bash
    fi
    
    print_info "âœ… Turso CLI installed"
    echo
fi

# Check if user is logged in
if ! turso auth whoami &> /dev/null; then
    print_step "1. Login to Turso"
    print_info "You need to login to Turso first"
    echo "Run: turso auth login"
    echo
    read -p "Press Enter after you've logged in..."
    echo
fi

# List existing databases
print_step "2. Database Selection"
print_info "Here are your existing Turso databases:"
echo

if turso db list | grep -q "No databases found"; then
    print_info "No databases found. Let's create one!"
    echo
    
    # Create a new database
    read -p "Enter database name (e.g., email-scheduler): " db_name
    
    if [ -z "$db_name" ]; then
        db_name="email-scheduler"
        print_info "Using default name: $db_name"
    fi
    
    print_info "Creating database: $db_name"
    turso db create "$db_name"
    
    print_info "âœ… Database created: $db_name"
else
    turso db list
    echo
    print_info "Enter the name of the database you want to use:"
    read -p "Database name: " db_name
    
    if [ -z "$db_name" ]; then
        print_error "Database name cannot be empty"
        exit 1
    fi
fi

echo

# Get database URL
print_step "3. Getting Database URL"
print_info "Fetching database URL..."
db_url=$(turso db show --url "$db_name")
print_info "âœ… Database URL: $db_url"
echo

# Create auth token
print_step "4. Creating Auth Token"
print_info "Creating authentication token..."
auth_token=$(turso db tokens create "$db_name")
print_info "âœ… Auth token created"
echo

# Create .env file
print_step "5. Creating .env File"

if [ -f ".env" ]; then
    print_warn ".env file already exists"
    print_info "Backing up existing .env to .env.backup"
    cp .env .env.backup
fi

cat > .env << EOF
# Turso Database Configuration
# Generated by setup-turso.sh on $(date)

TURSO_DATABASE_URL=$db_url
TURSO_AUTH_TOKEN=$auth_token

# Optional: Set log level for Rust binary
# RUST_LOG=info
EOF

print_info "âœ… .env file created"
echo

# Show next steps
print_step "6. Next Steps"
echo "Your Turso credentials are now configured!"
echo
echo "ðŸ“‹ What's been set up:"
echo "  â€¢ Database: $db_name"
echo "  â€¢ URL: $db_url"
echo "  â€¢ Auth token: [hidden]"
echo "  â€¢ .env file: created"
echo
echo "ðŸš€ Try these commands:"
echo "  ./turso-workflow.sh status    # Check setup"
echo "  ./turso-workflow.sh init      # Initialize sync"
echo "  ./test_turso.ml              # Test the setup"
echo
echo "ðŸ“š Read TURSO_INTEGRATION.md for full documentation"
echo

# Test the connection
print_step "7. Testing Connection"
print_info "Testing connection to Turso..."

if cargo build --release --quiet; then
    if ./target/release/turso-sync sync --replica-path test_connection.db 2>/dev/null; then
        print_info "âœ… Connection successful!"
        rm -f test_connection.db 2>/dev/null || true
    else
        print_warn "Connection test failed, but credentials are set up"
        print_info "Try: ./turso-workflow.sh status"
    fi
else
    print_info "Rust binary not built yet - run 'cargo build --release' to build"
fi

echo
print_info "ðŸŽ‰ Setup complete! Your .env file is ready to use." 